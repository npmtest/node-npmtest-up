{"/home/travis/build/npmtest/node-npmtest-up/test.js":"/* istanbul instrument in package npmtest_up */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-up/lib.npmtest_up.js":"/* istanbul instrument in package npmtest_up */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_up = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_up = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-up/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-up && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_up */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_up\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_up.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_up.rollup.js'] =\n            local.assetsDict['/assets.npmtest_up.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_up.__dirname + '/lib.npmtest_up.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-up/node_modules/up/index.js":"#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs');\nvar path = require('path');\nvar osenv = require('osenv');\nvar Cloudup = require('cloudup-client');\nvar pkg = require('./package');\n\n/**\n * Configuration path.\n */\n\nexports.configPath = path.resolve(osenv.home(), '.cloudup.json');\n\n/**\n * Create a client with `opts`.\n *\n * @param {Object} opts\n * @return {Cloudup}\n * @api private\n */\n\nexports.client = function(opts){\n  opts = opts || {};\n  opts.useragent = 'cloudup-cli/' + pkg.version;\n  if (process.env.UP_API_URL) opts.url = process.env.UP_API_URL;\n  if (process.env.UP_CLOUDUP_URL) opts.cloudupUrl = process.env.UP_CLOUDUP_URL;\n  return new Cloudup(opts);\n};\n\n/**\n * Read config.\n *\n * @return {Object}\n * @api public\n */\n\nexports.readConfig = function(){\n  var json, obj;\n\n  // read\n  try {\n    json = fs.readFileSync(exports.configPath, 'utf8');\n  } catch (err) {\n    console.error('\\n  Failed to load configuration.');\n    console.error('  Execute: `up config` to get started!\\n');\n    process.exit(1);\n  }\n\n  // parse\n  try {\n    obj = JSON.parse(json);\n  } catch (err) {\n    console.error('\\n  Failed to parse ' + exports.configPath + '\\n');\n    process.exit(1);\n  }\n\n  // validate\n  if (!(obj.user && obj.token)) {\n    console.error('\\n  Auth token missing.');\n    console.error('  Execute: `up config` to get a token!\\n');\n    process.exit(1);\n  }\n\n  return obj;\n};\n\n/**\n * Save config `obj`.\n *\n * @param {Object} obj\n * @api public\n */\n\nexports.saveConfig = function(obj){\n  var json = JSON.stringify(obj, null, 2) + '\\n';\n  fs.writeFileSync(exports.configPath, json);\n  // chmod the config file to rw for owner only to prevent other users from\n  // stealing the token\n  fs.chmodSync(exports.configPath, 0600);\n};\n","/home/travis/build/npmtest/node-npmtest-up/node_modules/up/lib/console.js":"\n/**\n * Module dependencies.\n */\n\nvar ansi = require('ansi');\nvar path = require('path');\nvar sprintf = require('printf');\nvar sum = require('sum-component');\nvar basename = path.basename;\n\n/**\n * Expose `Console`.\n */\n\nmodule.exports = Console;\n\n/**\n * Initialize a new `Console` reporter.\n *\n * - `direct` show direct links\n * - `progressOnly` show aggregate progress only\n *\n * @param {Stream} stream\n * @param {Object} options\n * @api public\n */\n\nfunction Console(stream, options) {\n  this.y = 0;\n  this.newlines = 0;\n  this.items = [];\n  this.cursor = ansi(process.stdout);\n  this.stream = stream;\n  this.direct = options.direct;\n  this.progressOnly = options.progressOnly;\n\n  // bind event listeners to `this`\n  this.onitem = this.onitem.bind(this);\n  this.onsave = this.onsave.bind(this);\n  this.onend = this.onend.bind(this);\n\n  // attach event listeners to `stream`\n  stream.on('item', this.onitem);\n  stream.on('save', this.onsave);\n  stream.on('end', this.onend);\n\n  // setup the cursor and global event listeners\n  this.cursor.hide();\n  var self = this;\n  function showCursor(){\n    self.cursor.show();\n  }\n  process.on('uncaughtException', showCursor);\n  process.on('uncaughtException', fatal);\n  process.on('exit', showCursor);\n  process.on('SIGINT', showCursor);\n  process.on('SIGINT', process.exit.bind(null, 1));\n}\n\n/**\n * Stream \"item\" event listener.\n *\n * @api private\n */\n\nConsole.prototype.onitem = function(item){\n  this.items.push(item);\n  if (this.progressOnly) {\n    this.aggregate(item);\n  } else {\n    this.progress(item);\n  }\n};\n\n/**\n * Item aggregate progress.\n *\n * @api private\n */\n\nConsole.prototype.aggregate = function(item){\n  var self = this;\n  item.progress = 0;\n  item.on('progress', function(e){\n    item.progress = e.percent;\n    self.update();\n  });\n};\n\n/**\n * Update aggregate progress.\n *\n * @api private\n */\n\nConsole.prototype.update = function(){\n  var len = this.items.length;\n  var percent = sum(this.items, 'progress') / len | 0;\n  this.log(0, len + ' items', percent + '%');\n};\n\n/**\n * Item progress reporting.\n *\n * @api private\n */\n\nConsole.prototype.progress = function(item){\n  var y = this.y++;\n  var self = this;\n  var direct = this.direct;\n  var cursor = this.cursor;\n\n  function onprogress(e){\n    var n = e.percent | 0;\n    self.log(y, ctx(item), n + '%');\n  }\n\n  function onend(){\n    var url = direct ? item.direct_url : item.url;\n    self.log(y, ctx(item), url);\n  }\n\n  if (cursor.enabled) {\n    process.nextTick(function(){\n      // fire off a fake 0% event so that the line gets rendered\n      item.emit('progress', 0);\n    });\n\n    item.on('progress', onprogress);\n  }\n\n  item.on('end', onend);\n};\n\n/**\n * Output collection link on save.\n *\n * @api private\n */\n\nConsole.prototype.onsave = function(){\n  var y = this.progressOnly ? 1 : this.items.length;\n  this.log(y, 'stream', this.stream.url);\n};\n\n/**\n * Stream \"end\" event listener.\n * Doesn't actually need to do anything...\n *\n * @api private\n */\n\nConsole.prototype.onend = function(){\n  // no-op\n  //var y = this.progressOnly ? 2 : this.items.length + 1;\n  //this.log(y, 'that\\'s all', 'folks!');\n};\n\n/**\n * Log `key` / `str` on the relative line index `y` (starts at 0).\n *\n * @param {Number} y\n * @param {String} key\n * @param {String} str\n * @api private\n */\n\nConsole.prototype.log = function(y, key, str){\n\n  var up = 0;\n  var moved = false;\n  if (this.cursor.enabled) {\n    // first ensure that we've at least written `y` newlines by now\n    while (this.newlines < y) {\n      this.cursor.write('\\n');\n      this.newlines++;\n    }\n\n    // at this point, we may need to move the cursor up one or more\n    // rows in order to be on the correct `y` line before writing\n    up = this.newlines - y;\n    moved = false;\n    if (up > 0) {\n      moved = true;\n      this.cursor.up(up);\n    }\n  }\n\n  // now that we know we're on the correct `y` line, output the text\n  this.cursor\n    .fg.cyan()\n    .write(sprintf('%25s', key))\n    .fg.reset()\n    .write(' : ')\n    .fg.brightBlack()\n    .write(str)\n    .fg.reset()\n    .write('\\n');\n\n  if (this.cursor.enabled) {\n    up--; // subtract from `up` since we just output a \\n\n    if (up > 0) {\n      this.cursor.down(up);\n    }\n    if (!moved) {\n      // if we didn't call `cursor.up()` before, then we can increment the \\n count\n      this.newlines++;\n    }\n  }\n};\n\n/**\n * Fatal error.\n */\n\nfunction fatal(err) {\n  console.error(err.stack.replace(/^/gm, '  '));\n  process.exit(1);\n}\n\n/**\n * Truncate `str`.\n */\n\nfunction truncate(str, width) {\n  if (null == width) width = 20;\n  if (str.length < width) return str;\n  return str.slice(0, width) + '…';\n}\n\n/**\n * Context string for `item`.\n */\n\nfunction ctx(item) {\n  return truncate(item._file ?\n    basename(item.filename || item._file) :\n    item._url);\n}\n","/home/travis/build/npmtest/node-npmtest-up/node_modules/up/lib/plain.js":"\n/**\n * Expose `PlainReporter`.\n */\n\nmodule.exports = PlainReporter;\n\n/**\n * Initialize a new `PlainReporter` reporter.\n *\n * @param {Stream} stream\n * @param {Object} options\n * @api public\n */\n\nfunction PlainReporter(stream, options) {\n  stream.on('end', function(){\n    console.log(stream.url);\n  });\n}\n"}